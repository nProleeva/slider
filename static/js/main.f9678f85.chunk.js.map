{"version":3,"sources":["outputForm.tsx","form.tsx","time.tsx","App.tsx","index.tsx"],"names":["Output","props","refTitle","useRef","refFragment","width","useEffect","current","Math","floor","offsetWidth","arrayOutput","ref","map","value","index","length","regex","RegExp","arraySpan","split","reducerSpan","className","valueSpan","indexSpan","lengthSpan","style","animationDuration","animationTimingFunction","animationDelay","Form","React","forwardRef","refDiv","refTextArea","useState","setArrayOutput","focus","onSubmit","event","concat","preventDefault","stopPropagation","required","type","Time","currentTime","setCurrentTime","timeId","undefined","options","hour","minute","second","hour12","Date","toLocaleString","setInterval","clearTimeout","App","clientX","refForm","refTime","classList","add","onTouchMove","target","touches","parentElement","contains","remove","onTouchStart","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f9678f85.chunk.js","sourcesContent":["import React, {useEffect, useRef} from \"react\";\nimport \"./outputForm.scss\"\n\ninterface typeProps {\n    arrayOutput: Array<string>\n}\ninterface typeStyleLast {\n    width:string,\n    animationDuration:string,\n    animationTimingFunction:string,\n    animationDelay:string\n}\n\nconst Output:React.FC<typeProps> = (props:typeProps) => {\n    const refTitle = useRef<HTMLSpanElement>(null),\n        refFragment = useRef<HTMLDivElement>(null),\n        width = useRef<number|undefined>(0)\n\n    useEffect(()=>{\n        if(refFragment.current && refTitle.current)\n            width.current = Math.floor((refFragment.current.offsetWidth * 6) / refTitle.current.offsetWidth);\n    },[props.arrayOutput])\n    return <div ref={refFragment}>\n        <p><span ref={refTitle}>Вывод:</span></p>\n        {\n            props.arrayOutput.map((value:string,index:number)=>{\n                if(index===(props.arrayOutput.length-1)) {\n                    let regex:RegExp = new RegExp(`([^\\\\s]{0,${width.current}})`),\n                        arraySpan:Array<string> = value.split(regex),\n                        reducerSpan:number = 0;\n                    return <p className=\"lastOutput\" key={index}>\n                        {\n                            arraySpan.map((valueSpan:string, indexSpan:number)=>{\n                                let lengthSpan:number = valueSpan.length,\n                                    style:typeStyleLast = {\n                                        width:`${lengthSpan}ch`,\n                                        animationDuration:`${lengthSpan/4}s, ${reducerSpan/4}s`,\n                                        animationTimingFunction:`steps(${lengthSpan}), ease-in-out`,\n                                        animationDelay: `${reducerSpan/4}s, 0s`\n                                    }\n                                reducerSpan+=lengthSpan;\n                                return <span style={style} key={indexSpan} className=\"output\">{valueSpan}</span>\n                            })\n                        }\n                    </p>\n                }\n                return <p key={index}>\n                    {value}\n                </p>\n            })\n        }\n    </div>;\n}\n\nexport default Output;","import React, {useEffect, useRef, useState, ForwardedRef} from 'react';\nimport Output from \"./outputForm\";\nimport \"./form.scss\"\n\nconst Form = React.forwardRef<HTMLDivElement, {}>((props:{}, refDiv:ForwardedRef<HTMLDivElement>) => {\n\n    const refTextArea = useRef<HTMLTextAreaElement>(null);\n    const [arrayOutput, setArrayOutput] = useState<Array<string>>([]);\n\n    useEffect(()=>{\n        if (typeof refTextArea === 'object' && refTextArea?.current) refTextArea.current.focus();\n    }, []);\n\n    function onSubmit(event:React.FormEvent<HTMLFormElement>):void {\n        if (typeof refTextArea === 'object' && refTextArea?.current) {\n            setArrayOutput(arrayOutput.concat(refTextArea.current.value as string));\n            refTextArea.current.value = '';\n            refTextArea.current.focus();\n        }\n        event.preventDefault();\n        event.stopPropagation();\n    }\n    return (\n        <div className=\"form\" ref={refDiv}>\n            <form onSubmit={onSubmit}>\n                <textarea ref={refTextArea} required></textarea>\n                <input type=\"submit\" value=\"Send\"/>\n            </form>\n            <Output arrayOutput={arrayOutput}/>\n        </div>)\n})\nexport default Form;","import React, {useState, useEffect, useRef, ForwardedRef} from \"react\";\nimport \"./time.scss\";\n\ntype typeOption = \"numeric\" | \"2-digit\" | undefined;\n\ninterface formatTime {\n    hour: typeOption,\n    minute: typeOption,\n    second: typeOption,\n    hour12: boolean\n}\n\nconst Time = React.forwardRef<HTMLDivElement, {}>((props:{}, refDiv:ForwardedRef<HTMLDivElement>) => {\n    const [currentTime, setCurrentTime] = useState<string>('');\n    const timeId = useRef<NodeJS.Timeout|undefined>(undefined);\n\n    useEffect(launchClock, []);\n    useEffect(()=>{\n        return()=>clearTimeout(timeId.current as (number | undefined));\n    },[]);\n\n    function launchClock():void {\n        const options:formatTime = {\n            hour: 'numeric', minute: 'numeric', second: 'numeric',\n            hour12: false\n        };\n        setCurrentTime((new Date()).toLocaleString('en-US', options))\n        timeId.current = setInterval(() => {\n            setCurrentTime((new Date()).toLocaleString('en-US', options));\n        },1000);\n\n    }\n\n    return <div className=\"time\" ref={refDiv}><span>{currentTime}</span></div>;\n})\nexport default Time","import React, {useEffect, useRef} from 'react';\nimport './App.scss';\nimport Form from \"./form\";\nimport Time from \"./time\";\n\nconst App:React.FC<{}> = () => {\n\n    const clientX = useRef<number>(0)\n    const refForm = useRef<HTMLDivElement>(null);\n    const refTime = useRef<HTMLDivElement>(null);\n\n    useEffect(()=>{\n        refTime.current?.classList.add(\"none\");\n    },[]);\n    function touchStart(event:React.TouchEvent<HTMLDivElement>){\n        clientX.current = event.touches[0].clientX;\n    }\n    function touchMove(event:React.TouchEvent<HTMLDivElement>){\n        let target:HTMLElement = (event.touches[0].target as HTMLElement);\n        while(target!==refForm.current&&target!==refTime.current) {\n            target = target.parentElement as HTMLElement;\n        }\n        if(!target.classList.contains(\"none\")) {\n            if (target === refForm.current && event.touches[0].clientX - clientX.current < 0) {\n                refTime.current?.classList.remove(\"none\");\n                refForm.current.classList.add(\"none\");\n            } else if (target === refTime.current && event.touches[0].clientX - clientX.current > 0) {\n                refForm.current?.classList.remove(\"none\");\n                refTime.current.classList.add(\"none\");\n            }\n        }\n    }\n    return (\n        <div className=\"App\" onTouchMove={touchMove} onTouchStart={touchStart}>\n            <Form ref={refForm}/>\n            <Time ref={refTime}/>\n        </div>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}